#include "arduino_secrets.h"
// ArduinoJson - Version: 6.16.1
#include <ArduinoJson.h>
#include <ArduinoJson.hpp>

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/bb96d929-cc55-41e5-8dba-4295a5bfb044 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float brightness;
  float humidity;
  float soilMoisture;
  float temperature;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include "Connection.h"
#include "MsgServiceSerial.h"
#include "CloudParameterHolder.h"
#include "MsgServiceArduino.h"
#include "Esp8266.h"
#include <stdio.h>
#include <string.h>


/* wifi network name */
#define SSIDNAME "ONEPLUS_co_aprdrr"
/* WPA2 PSK password */
#define PWD "rdrr6202"
/* MQTT server */
#define MQTT_SERVER "broker.mqtt-dashboard.com"

#define INIT 0
#define RECEIVE 1
#define SEND 2

#define RX D6
#define TX D5

#define FREQ1 5000
#define FREQ2 20

#define GREENHOUSE_ID "greenhouse1"

MsgServiceArduino *msgARD;
Connection *conn;
CloudParameterHolder *holder;

int state;
int id;
int i = 0;
unsigned long previousMillis1 = 0;
unsigned long previousMillis2 = 0;


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();
  
  msgARD = new MsgServiceArduino(RX, TX);
  msgARD->init();

  holder = new CloudParameterHolder(&brightness, &temperature, &humidity, &soilMoisture);

  conn = new Esp8266(SSIDNAME, PWD, MQTT_SERVER, msgARD, holder, GREENHOUSE_ID);
  conn->connecting();

  state = RECEIVE;

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  
   ArduinoCloud.update();
  conn->processIncomingMessages();
  if (msgARD->isMsgAvailable()){
      Msg *message = msgARD->receiveMsg();
      String m = message->getContent();
      Serial.println(m);
      //invia dati con mqtt
      conn->sendData("dataSG", m);
      delete message;
  }
  delay(1000);
  
  
}




/*
  Since Brightness is READ_WRITE variable, onBrightnessChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onBrightnessChange()  {
  String msg = "{'id': '" + String(GREENHOUSE_ID) + "','param': 'Bright','value': " + brightness + "}";
  conn->sendData("dataSG", msg);
}

/*
  Since Temperature is READ_WRITE variable, onTemperatureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTemperatureChange()  {
  String msg = "{'id': '" + String(GREENHOUSE_ID) + "','param': 'Temp','value': " + temperature + "}";
  conn->sendData("dataSG", msg);
}

/*
  Since Humidity is READ_WRITE variable, onHumidityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumidityChange()  {
  String msg = "{'id': '" + String(GREENHOUSE_ID) + "','param': 'Hum','value': " + humidity + "}";
  conn->sendData("dataSG", msg);
}

/*
  Since SoilMoisture is READ_WRITE variable, onSoilMoistureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSoilMoistureChange()  {
   String msg = "{'id': '" + String(GREENHOUSE_ID) + "','param': 'Soil','value': " + soilMoisture + "}";
  conn->sendData("dataSG", msg);
}